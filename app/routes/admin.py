from fastapi import APIRouter, Request, Depends, HTTPException, Form, Query
from fastapi.responses import RedirectResponse, HTMLResponse
from sqlalchemy.orm import Session
from sqlalchemy import func
from datetime import datetime, timezone
import random
import logging

from app.database import get_users_statistics, get_words_statistics
from app.models import User, Word, GameSetting, GameSession
from app.auth_utils import get_admin_user, get_db
from app.templates import templates, render_error_page

router = APIRouter()
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ª–æ–≥–æ–≤
admin_log_format = "üîê [ADMIN ACTION] %s"


@router.get("/admin", response_class=HTMLResponse)
def admin_dashboard(
    request: Request,
    current_admin: User = Depends(get_admin_user),
    db: Session = Depends(get_db),
):
    try:
        logger.info(
            admin_log_format,
            f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {current_admin.email} –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        )

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        user_stats = get_users_statistics(db)
        words_stats = get_words_statistics(db)

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã
        settings = db.query(GameSetting).all()

        return templates.TemplateResponse(
            "admin/index.html",
            {
                "request": request,
                "admin_user": current_admin,
                "user_stats": user_stats,
                "words_stats": words_stats,
                "settings": settings,
                "active_tab": "stats",
            },
        )
    except Exception as e:
        return render_error_page(
            request=request,
            error_message="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            exception=e
        )


@router.get("/admin/dictionary", response_class=HTMLResponse)
def admin_dictionary(
    request: Request,
    current_admin: User = Depends(get_admin_user),
    db: Session = Depends(get_db),
):
    try:
        logger.info(
            admin_log_format, f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {current_admin.email} –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å"
        )

        words = db.query(Word).all()

        # TODO: –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É —Å–ª–æ–≤

        return templates.TemplateResponse(
            "admin/dictionary.html",
            {
                "request": request,
                "admin_user": current_admin,
                "words": words,
                "active_tab": "dictionary",
            },
        )
    except Exception as e:
        return render_error_page(
            request=request,
            error_message="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–æ–≤–∞—Ä—è",
            exception=e
        )


@router.get("/admin/settings", response_class=HTMLResponse)
def admin_settings(
    request: Request,
    current_admin: User = Depends(get_admin_user),
    db: Session = Depends(get_db),
):
    try:
        logger.info(
            admin_log_format, f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {current_admin.email} –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
        )

        settings = db.query(GameSetting).all()

        # TODO: –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫

        return templates.TemplateResponse(
            "admin/settings.html",
            {
                "request": request,
                "admin_user": current_admin,
                "settings": settings,
                "active_tab": "settings",
            },
        )
    except Exception as e:
        return render_error_page(
            request=request,
            error_message="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫",
            exception=e
        )


# –°–ª—É–∂–µ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∞–≥—Ä–∞–º–º —Å —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–π –∑–∞—â–∏—Ç–æ–π –æ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
def create_scrambled_word(word):
    chars = list(word)
    random.shuffle(chars)
    scrambled = "".join(chars).upper()

    if scrambled.lower() == word.lower():
        return create_scrambled_word(word)

    return scrambled


@router.post("/admin/words/create")
def create_word(
    request: Request,
    current_admin: User = Depends(get_admin_user),
    db: Session = Depends(get_db),
    text: str = Form(...),
    translation: str = Form(...),
    description: str = Form(...),
    difficulty: str = Form(...),
):
    try:
        logger.info(
            admin_log_format,
            f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {current_admin.email} —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ: {text}, —Å–ª–æ–∂–Ω–æ—Å—Ç—å: {difficulty}",
        )

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not text or len(text.strip()) == 0:
            raise HTTPException(status_code=400, detail="–¢–µ–∫—Å—Ç —Å–ª–æ–≤–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

        if not translation or len(translation.strip()) == 0:
            raise HTTPException(status_code=400, detail="–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

        if not description or len(description.strip()) == 0:
            raise HTTPException(status_code=400, detail="–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

        if difficulty not in ["easy", "medium", "hard"]:
            raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å")

        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–æ —Å —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        try:
            word = Word(
                text=text.strip(),
                translation=translation.strip(),
                description=description.strip(),
                difficulty=difficulty,
                created_at=datetime.now(timezone.utc),
            )

            db.add(word)
            db.commit()

            logger.info(admin_log_format, f"–°–ª–æ–≤–æ '{text}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ —Å ID: {word.id}")

            return RedirectResponse(url="/admin/dictionary", status_code=303)
        except Exception as e:
            db.rollback()
            logger.error(admin_log_format, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ª–æ–≤–∞: {e}")
            raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ª–æ–≤–∞: {e}")
    except HTTPException as he:
        raise he
    except Exception as e:
        return render_error_page(
            request=request,
            error_message="–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ª–æ–≤–∞",
            exception=e
        )


@router.post("/admin/words/{word_id}/edit")
def update_word(
    word_id: int,
    request: Request,
    current_admin: User = Depends(get_admin_user),
    db: Session = Depends(get_db),
    text: str = Form(...),
    translation: str = Form(...),
    description: str = Form(...),
    difficulty: str = Form(...),
):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞
        word = db.query(Word).filter(Word.id == word_id).first()
        if not word:
            raise HTTPException(status_code=404, detail="–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        logger.info(
            admin_log_format,
            f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {current_admin.email} –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ª–æ–≤–æ ID: {word_id} —Å '{word.text}' –Ω–∞ '{text}'",
        )

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not text or len(text.strip()) == 0:
            raise HTTPException(
                status_code=400, detail="–¢–µ–∫—Å—Ç —Å–ª–æ–≤–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
            )

        if not translation or len(translation.strip()) == 0:
            raise HTTPException(status_code=400, detail="–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

        if not description or len(description.strip()) == 0:
            raise HTTPException(status_code=400, detail="–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

        if difficulty not in ["easy", "medium", "hard"]:
            raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å")

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
        word.text = text.strip()
        word.translation = translation.strip()
        word.description = description.strip()
        word.difficulty = difficulty

        db.commit()

        logger.info(admin_log_format, f"–°–ª–æ–≤–æ ID: {word_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")

        return RedirectResponse(url="/admin/dictionary", status_code=303)
    except HTTPException as he:
        raise he
    except Exception as e:
        db.rollback()
        logger.error(admin_log_format, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞: {e}")
        return render_error_page(
            request=request,
            error_message="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞",
            exception=e
        )


@router.post("/admin/words/{word_id}/delete")
def delete_word(
    word_id: int,
    request: Request,
    current_admin: User = Depends(get_admin_user),
    db: Session = Depends(get_db),
):
    try:
        word = db.query(Word).filter(Word.id == word_id).first()
        if not word:
            raise HTTPException(status_code=404, detail="–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        logger.info(
            admin_log_format,
            f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {current_admin.email} —É–¥–∞–ª—è–µ—Ç —Å–ª–æ–≤–æ ID: {word_id}, —Ç–µ–∫—Å—Ç: '{word.text}'",
        )

        db.delete(word)
        db.commit()

        logger.info(admin_log_format, f"–°–ª–æ–≤–æ —Å ID: {word_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ")

        return RedirectResponse(url="/admin/dictionary", status_code=303)
    except HTTPException as he:
        raise he
    except Exception as e:
        db.rollback()
        logger.error(admin_log_format, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞: {e}")
        return render_error_page(
            request=request,
            error_message="–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞",
            exception=e
        )


@router.get("/admin/words/{word_id}/edit", response_class=HTMLResponse)
def edit_word_form(
    word_id: int,
    request: Request,
    current_admin: User = Depends(get_admin_user),
    db: Session = Depends(get_db),
):
    try:
        logger.info(
            admin_log_format,
            f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {current_admin.email} –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ–≤–∞ ID: {word_id}",
        )

        word = db.query(Word).filter(Word.id == word_id).first()
        if not word:
            logger.warning(
                admin_log_format,
                f"–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–ª–æ–≤–∞ ID: {word_id}",
            )
            raise HTTPException(status_code=404, detail="–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        return templates.TemplateResponse(
            "admin/edit_word.html",
            {"request": request, "admin_user": current_admin, "word": word},
        )
    except HTTPException as he:
        raise he
    except Exception as e:
        return render_error_page(
            request=request,
            error_message="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
            exception=e
        )


@router.post("/admin/settings/update")
async def update_settings(
    request: Request,
    current_admin: User = Depends(get_admin_user),
    db: Session = Depends(get_db),
):
    try:
        logger.info(
            admin_log_format,
            f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {current_admin.email} –æ–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
        )

        form_data = await request.form()
        updated_keys = []

        for key, value in form_data.items():
            if key.startswith("setting_"):
                setting_key = key.replace("setting_", "")

                if value is None or len(str(value).strip()) == 0:
                    raise HTTPException(
                        status_code=400,
                        detail=f"–ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ '{setting_key}' –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º",
                    )

                setting = (
                    db.query(GameSetting).filter(GameSetting.key == setting_key).first()
                )
                if setting:
                    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                    if setting.value != value:
                        logger.info(
                            admin_log_format,
                            f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ '{setting_key}' –∏–∑–º–µ–Ω–µ–Ω–∞ —Å '{setting.value}' –Ω–∞ '{value}'",
                        )
                        setting.value = value
                        updated_keys.append(setting_key)

        db.commit()

        # –§–∏–Ω–∞–ª—å–Ω—ã–π –ª–æ–≥ –¥–ª—è –æ–±—â–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
        if updated_keys:
            logger.info(
                admin_log_format, f"–û–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {', '.join(updated_keys)}"
            )
        else:
            logger.info(
                admin_log_format, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã, –Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –≤–Ω–µ—Å–µ–Ω–æ"
            )

        return RedirectResponse(url="/admin/settings", status_code=303)
    except HTTPException as he:
        raise he
    except Exception as e:
        db.rollback()
        logger.error(admin_log_format, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        return render_error_page(
            request=request,
            error_message="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫",
            exception=e
        )


@router.get("/admin/users", response_class=HTMLResponse)
def admin_users(
    request: Request,
    page: int = Query(1, ge=1),  # FastAPI Query, –∞ –Ω–µ sqlalchemy.orm.Query
    per_page: int = Query(10, ge=5, le=100),
    current_admin: User = Depends(get_admin_user),
    db: Session = Depends(get_db),
):
    try:
        logger.info(
            admin_log_format,
            f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {current_admin.email} –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page})",
        )

        total_users = db.query(func.count(User.id)).scalar()
        total_pages = (total_users + per_page - 1) // per_page

        # TODO: –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∏ –ø–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏/email

        users = (
            db.query(User)
            .order_by(User.id)
            .offset((page - 1) * per_page)
            .limit(per_page)
            .all()
        )

        return templates.TemplateResponse(
            "admin/users.html",
            {
                "request": request,
                "admin_user": current_admin,
                "users": users,
                "active_tab": "users",
                "current_page": page,
                "total_pages": total_pages,
                "per_page": per_page,
            },
        )
    except Exception as e:
        return render_error_page(
            request=request,
            error_message="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            exception=e
        )


@router.post("/admin/users/create")
def create_user(
    request: Request,
    current_admin: User = Depends(get_admin_user),
    db: Session = Depends(get_db),
    name: str = Form(...),
    email: str = Form(...),
    password: str = Form(...),
    role: str = Form(...),
):
    try:
        logger.info(
            admin_log_format,
            f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {current_admin.email} —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å email: {email}, —Ä–æ–ª—å: {role}",
        )

        existing = db.query(User).filter(User.email == email).first()
        if existing:
            logger.warning(
                admin_log_format,
                f"–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º email: {email}",
            )
            raise HTTPException(
                status_code=400, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            )

        from app.password_utils import get_password_hash

        user = User(
            name=name, email=email, password_hash=get_password_hash(password), role=role
        )

        db.add(user)
        db.commit()

        logger.info(
            admin_log_format,
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email {email} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å ID: {user.id}",
        )

        return RedirectResponse(url="/admin/users", status_code=303)
    except HTTPException as he:
        raise he
    except Exception as e:
        db.rollback()
        logger.error(admin_log_format, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return render_error_page(
            request=request,
            error_message="–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            exception=e
        )


@router.post("/admin/users/{user_id}/delete")
def delete_user(
    user_id: int,
    request: Request,
    current_admin: User = Depends(get_admin_user),
    db: Session = Depends(get_db),
):
    try:
        if user_id == current_admin.id:
            logger.warning(
                admin_log_format,
                f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {current_admin.email} –ø—ã—Ç–∞–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å",
            )
            raise HTTPException(
                status_code=400,
                detail="–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            )

        user = db.query(User).filter(User.id == user_id).first()
        if not user:
            raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

        logger.info(
            admin_log_format,
            f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {current_admin.email} —É–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.email} (ID: {user_id})",
        )

        db.delete(user)
        db.commit()

        logger.info(admin_log_format, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {user_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")

        return RedirectResponse(url="/admin/users", status_code=303)
    except HTTPException as he:
        raise he
    except Exception as e:
        db.rollback()
        logger.error(admin_log_format, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return render_error_page(
            request=request,
            error_message="–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            exception=e
        )


@router.post("/admin/users/{user_id}/toggle_admin_role")
def toggle_admin_view(
    user_id: int,
    request: Request,
    current_admin: User = Depends(get_admin_user),
    db: Session = Depends(get_db),
):
    try:
        user = db.query(User).filter(User.id == user_id).first()
        if not user:
            raise HTTPException(status_code=404, detail="User not found")

        logger.info(
            admin_log_format,
            f"Administrator {current_admin.email} is changing role for user {user.email} (ID: {user_id})",
        )

        # If we're trying to remove admin rights
        if user.role == "admin" and user.id != current_admin.id:
            # Check how many admins are in the system
            admin_count = db.query(User).filter(User.role == "admin").count()
            if admin_count <= 1:
                logger.warning(
                    admin_log_format,
                    "Attempt to remove rights from the last system administrator",
                )
                return RedirectResponse(
                    url="/admin/users?error=Cannot remove the last administrator from the system",
                    status_code=303,
                )

        # Prevent changing your own role
        if user.id == current_admin.id:
            logger.warning(
                admin_log_format,
                f"Administrator {current_admin.email} attempts to change their own role",
            )
            return RedirectResponse(
                url="/admin/users?error=You cannot change your own administrator role",
                status_code=303,
            )

        # Toggle role
        new_role = "user" if user.role == "admin" else "admin"
        user.role = new_role

        db.commit()

        logger.info(
            admin_log_format,
            f"User {user.email} (ID: {user_id}) role changed to '{new_role}'",
        )

        return RedirectResponse(
            url="/admin/users?success=User role successfully updated", status_code=303
        )
    except HTTPException as he:
        # Redirect with error message instead of raising the exception
        return RedirectResponse(url=f"/admin/users?error={he.detail}", status_code=303)
    except Exception as e:
        db.rollback()
        logger.error(admin_log_format, f"Error while changing user role: {e}")
        return render_error_page(
            request=request,
            error_message="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            exception=e
        )
